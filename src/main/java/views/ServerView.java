/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package views;

import connexions.ServerThread;
import db.DatabaseHelper;

import javax.swing.*;
import java.io.IOException;
import java.util.Random;
import java.util.logging.Level;
import java.util.logging.Logger;

/**
 * @author NeRooN
 */
public class ServerView extends javax.swing.JFrame {

    private static boolean statusOn = false;
    private static ServerThread serverThread;
    private final int DEFAULT_PORT = 5000;
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addCategories;
    private javax.swing.JButton addData;
    private javax.swing.JButton addPlatforms;
    private javax.swing.JButton disconnectBtn;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JButton newAdmin;
    private javax.swing.JList<String> socketList;
    private javax.swing.JButton startButton;
    private javax.swing.JLabel statusText;
    private javax.swing.JButton test;
    private javax.swing.JButton updateList;

    /**
     * Creates new form ServerView
     */
    public ServerView() {
        initComponents();
        this.setVisible(true);
        disconnectBtn.setEnabled(false);
        newAdmin.setEnabled(false);
        test.setEnabled(false);
        addData.setEnabled(false);
        addCategories.setEnabled(false);
        addPlatforms.setEnabled(false);
        setResizable(false);
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String[] args) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ServerView.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ServerView().setVisible(true);
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form. WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        startButton = new javax.swing.JButton();
        statusText = new javax.swing.JLabel();
        updateList = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        socketList = new javax.swing.JList<>();
        disconnectBtn = new javax.swing.JButton();
        newAdmin = new javax.swing.JButton();
        addPlatforms = new javax.swing.JButton();
        addCategories = new javax.swing.JButton();
        test = new javax.swing.JButton();
        addData = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        startButton.setText("Start");
        startButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                startButtonActionPerformed(evt);
            }
        });

        statusText.setText("Server offline");

        updateList.setText("Update");
        updateList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                updateListActionPerformed(evt);
            }
        });

        jScrollPane2.setViewportView(socketList);

        disconnectBtn.setText("Disconnect");
        disconnectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                disconnectBtnActionPerformed(evt);
            }
        });

        newAdmin.setText("New Admin");
        newAdmin.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newAdminActionPerformed(evt);
            }
        });

        addPlatforms.setText("Add Platforms");
        addPlatforms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addPlatformsActionPerformed(evt);
            }
        });

        addCategories.setText("Add Categories");
        addCategories.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addCategoriesActionPerformed(evt);
            }
        });

        test.setText("Test");
        test.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                testActionPerformed(evt);
            }
        });

        addData.setText("Add data");
        addData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addDataActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(jPanel1Layout.createSequentialGroup().addGap(14, 14, 14).addComponent(statusText, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)).addGroup(jPanel1Layout.createSequentialGroup().addContainerGap().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false).addComponent(addData, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(newAdmin, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(addPlatforms, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addComponent(addCategories, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)).addGap(18, 18, 18).addComponent(test, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE))).addGap(101, 101, 101).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE).addGroup(jPanel1Layout.createSequentialGroup().addComponent(disconnectBtn).addGap(18, 18, 18).addComponent(updateList, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE).addGap(18, 18, 18).addComponent(startButton, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE))).addGap(26, 26, 26)));
        jPanel1Layout.setVerticalGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup().addGap(20, 20, 20).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE).addGroup(jPanel1Layout.createSequentialGroup().addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(newAdmin).addComponent(test)).addGap(18, 18, 18).addComponent(addPlatforms).addGap(18, 18, 18).addComponent(addCategories).addGap(18, 18, 18).addComponent(addData))).addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 32, Short.MAX_VALUE).addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE).addComponent(startButton).addComponent(statusText).addComponent(updateList).addComponent(disconnectBtn)).addGap(24, 24, 24)));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));
        layout.setVerticalGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING).addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Method to close or start the server
     *
     * @param evt
     */
    private void startButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_startButtonActionPerformed
        // TODO add your handling code here:
        if (!statusOn) {
            serverThread = new ServerThread(getPort(), this);
            serverThread.start();
            statusText.setText("Server Online");
            startButton.setText("Stop");
            statusOn = true;
            newAdmin.setEnabled(true);
            addCategories.setEnabled(true);
            addPlatforms.setEnabled(true);
            test.setEnabled(true);
            addData.setEnabled(true);
        } else if (statusOn) {
            try {
                statusText.setText("Server Offline");
                startButton.setText("Start");
                statusOn = false;
                newAdmin.setEnabled(false);
                addCategories.setEnabled(false);
                addPlatforms.setEnabled(false);
                addData.setEnabled(false);
                test.setEnabled(false);
                serverThread.getSockets().forEach(s -> {
                    try {
                        s.close();
                    } catch (IOException ex) {
                        Logger.getLogger(ServerView.class.getName()).log(Level.SEVERE, null, ex);
                    }
                });
                serverThread.getServer().close();
                serverThread.interrupt();
                serverThread = null;
            } catch (IOException ex) {
                //Logger.getLogger(ServerView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_startButtonActionPerformed

    /**
     * method to update the ip list on click
     *
     * @param evt
     */
    private void updateListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_updateListActionPerformed
        // TODO add your handling code here:
        updateList();
    }//GEN-LAST:event_updateListActionPerformed

    /**
     * Method to disconnect the selected socket
     *
     * @param evt
     */
    private void disconnectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_disconnectBtnActionPerformed
        // TODO add your handling code here:
        int socket = socketList.getSelectedIndex();
        if (socket >= 0) {
            try {
                serverThread.getSockets().get(socket).close();
            } catch (IOException ex) {
                Logger.getLogger(ServerView.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }//GEN-LAST:event_disconnectBtnActionPerformed

    private void newAdminActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newAdminActionPerformed
        // TODO add your handling code here:
        new NewAdmin().setVisible(true);
    }//GEN-LAST:event_newAdminActionPerformed

    private void addPlatformsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addPlatformsActionPerformed
        // TODO add your handling code here:
        new AddPlatforms();
    }//GEN-LAST:event_addPlatformsActionPerformed

    private void addCategoriesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addCategoriesActionPerformed
        // TODO add your handling code here:
        new AddCategories();
    }//GEN-LAST:event_addCategoriesActionPerformed

    private void testActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_testActionPerformed
        Random r = new Random();
        for (int i = 0; i < 5; i++) {
            System.out.println(r.nextInt(5));
        }
    }//GEN-LAST:event_testActionPerformed

    private void addDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addDataActionPerformed
        // TODO add your handling code here:
        String message = "By pressing Yes you will create 5 categories and platforms, 25 videogames and 5 users that can be admin.";
        String tittle = "Warning";
        if (JOptionPane.showConfirmDialog(null, message, tittle, JOptionPane.YES_NO_OPTION, JOptionPane.PLAIN_MESSAGE) == 0) {
            DatabaseHelper.generateData();
        }
    }//GEN-LAST:event_addDataActionPerformed

    /**
     * Method to update the ip list connexions to display in the ListModel
     */
    public void updateList() {

        if (serverThread == null) {
            return;
        }

        DefaultListModel<String> model = new DefaultListModel<>();
        socketList.setModel(model);
        String[] socketIPs = serverThread.getSockets().stream().map(s -> s.getInetAddress().toString()).toArray(size -> new String[size]);
        if (socketIPs == null || socketIPs.length == 0) {
            disconnectBtn.setEnabled(false);
            return;
        }
        disconnectBtn.setEnabled(true);
        for (int i = 0; i < socketIPs.length; i++) {
            model.addElement(socketIPs[i]);
        }
    }

    /**
     * @return the port from the text input or the default port in case nothing is written
     */
    public int getPort() {

        return Integer.parseInt(DEFAULT_PORT + "");

    }
    // End of variables declaration//GEN-END:variables
}
